#!/bin/sh

CMD="$1"
RAW_ARGS="${@:3}"
ARG="$2"

not_empty() {
    if [ -z "$1" ]; then
        echo "$2"
        exit 1
    fi
}

diff_array() {
    if [ -z $1 ] || [ -z $2 ]; then
        echo "Need two arrays to create difference"
        exit 1
    fi

    ARR1=("${!1}")
    ARR2=("${!2}")

    RESULT=()
    for i in "${ARR1[@]}"; do
        skip=
        for j in "${ARR2[@]}"; do
            [[ $i == $j ]] && { skip=1; break; }
        done
        [[ -n $skip ]] || RESULT+=("$i")
    done

    echo "${RESULT[@]}"
}

git_checkout_branch() {
    if [ -z "$ARG" ]; then
        git branch
    else
        BRANCH=$ARG
        BRANCHES=( $(git for-each-ref --format='%(refname:short)' refs/heads/) )

        FOUND=false
        for b in "${BRANCHES[@]}"; do
            if [[ "$b" == *"$BRANCH"* ]]; then
                if [ $FOUND = true ]; then
                    echo "Found multiple branches: $BRANCH, $b"
                    exit
                fi

                BRANCH=$b
                FOUND=true
            fi
        done

        if [[ "$BRANCH" == "remotes/"* || "$BRANCH" == "origin/"* ]]; then
            if [[ "$BRANCH" == "remotes/"* ]]; then
                BRANCH="$(echo $BRANCH | cut -d/ -f 2-)"
            fi
            git checkout --track $BRANCH
        else
            git show-ref --verify --quiet "refs/heads/$BRANCH"
            if [[ $? == 0 ]]; then
                git checkout "$BRANCH"
            else
                git checkout -b "$BRANCH"
            fi
        fi
    fi
}

git_merge() {
    not_empty "$ARG" "Branch needed"
    BRANCH="$ARG"
    CURRENT_BRANCH="$(git branch --show-current)"
    OPTS="$RAW_ARGS"

    if [ -z "$OPTS" ]; then
	OPTS="--no-ff"
    fi

    echo "Merging $CURRENT_BRANCH to $BRANCH with $RAW_ARGS"

    if git checkout $BRANCH; then
        if git merge $CURRENT_BRANCH $OPTS; then
            echo "Merge success"
        else
            echo "Returning to original branch"
            git checkout $CURRENT_BRANCH
        fi
    fi
}

git_branch_clean() {
    git fetch --prune
    TEMP_FILE=/tmp/gg_git_remove_branches

    REMOTE_BRANCHES=($(git branch --remote | cut -d '/' -f 2- | awk '{print $1}'))
    ALL_BRANCHES=($(git branch | sed 's/\*\{0,1\} *//'))
    REMOVE_BRANCHES=($(diff_array ALL_BRANCHES[@] REMOTE_BRANCHES[@]))

    printf "%s\n" "${REMOVE_BRANCHES[@]}" > $TEMP_FILE
    vim $TEMP_FILE

    if [[ "$1" -eq "-f" ]]; then
        xargs git branch -D < $TEMP_FILE
    else
        xargs git branch -d < $TEMP_FILE
    fi
}

git_push_upstream() {
    REMOTE="${ARG:-origin}"
    CURRENT_BRANCH="$(git branch --show-current)"

    git push --set-upstream $REMOTE $CURRENT_BRANCH
}

git_all_commit() {
    not_empty "$ARG" "Commit message cannot be empty"
    git add -A
    git commit -m "$ARG"
}

git_tag_delete() {
    not_empty "$ARG" "Tag name cannot be empty"
    git tag -d $ARG
    git push --delete origin $ARG
}

git_diff_lines() {
    not_empty "$ARG" "Branch name cannot be empty"
    git log ${ARG}..HEAD --pretty=tformat: --numstat |
        awk '{ add += $1 ; subs += $2 ; loc += $1 - $2 ; files += 1 } END \
        { printf "\033[32madded lines: %s \033[31mremoved lines: %s \033[34mtotal lines: %s\n\033[37mChanged %s files\n",add,subs,loc,files }'
}

git_log_day() {
    DATE="$ARG"
    if [ -z $DATE ]; then
        DATE="$(date '+%Y-%m-%d')"
    fi
    git log --all --oneline --graph --decorate --after="$DATE 00:00" --before="$DATE 23:59"
}

system_display_reload() {
    cat ~/.screenlayout/main.sh | sed 's/--pos [0-9]\+x[0-9]\+/--pos 0x0/' | sh
    sh ~/.screenlayout/main.sh
}

pdf_merge() {
    gs -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE=$ARG -dBATCH $RAW_ARGS
}

pdf_optimize() {
    if ${#RAW_ARGS[@]} != 2; then
        echo "Missing arguments"
        exit
    fi

    # Does not work yet
    OUTPUT=${RAW_ARGS[0]}
    SETTING=${RAW_ARGS[1]} # screen, ebook, printer, prepress, default
    gs -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/$SETTING -sOutputFile=$OUTPUT $ARG
}

case "$CMD" in
    ################
    # Git commands #
    ################

    "gl") git log --oneline --graph --decorate;;
    "gla") git log --all --oneline --graph --decorate;;
    "glm") git log --oneline --graph --decorate --first-parent origin/${ARG:-master};;
    "gld") git_log_day;;
    "gs") git status;;
    "gsub") git submodule update --init --recursive;;

    "gtd") git_tag_delete;;

    # Git diff commit
    "gd") git diff $ARG~ $ARG;;
    "gdl") git_diff_lines;;

    # Git commit
    "gca") git commit --amend;;
    "gc")
        not_empty "$ARG" "Commit message cannot be empty"
        git commit -m "$ARG"
        ;;
    #"ga") git_all_commit;;

    # Git merge (merges current branch to another)
    "gm") git_merge;;

    # Git Branch
    "gb") git_checkout_branch;;
    "gbc") git_branch_clean;;

    # Git push upstream
    "gpu") git_push_upstream;;
    "gp") git push;;
    "gpf") git push --force-with-lease;;

    # Git executable
    "gx") git update-index --chmod=+x $ARG;;

    ###################
    # System Commands #
    ###################

    # System Display Reload (for fixing display problem on startup)
    "sdr") system_display_reload;;
    
    ################
    # PDF Commands #
    ################

    "pm") pdf_merge;;
    "po") pdf_optimize;;

    ###################
    # Pacman Commands #
    ###################

    "pacls") pacman -Qi | egrep '^(Name|Installed)' | cut -f2 -d':' | paste - - | column -t | sort -nrk 2 | grep MiB | less;;

    *) printf "%s command not defined\n" $CMD;;
esac
